{
  "package_name": "com.yeah_well.pokemon_deck",
  "project_description": "A Pok\u00e9mon Deck management Flutter application that enables users to browse, collect, and manage a personalized Pok\u00e9mon collection. The app supports creating a deck of up to 20 unique Pok\u00e9mon, with features to view detailed Pok\u00e9mon information, add/remove Pok\u00e9mon from the deck, and navigate through different screens using a clean, modular architecture.",
  "architecture_overview": "The application leverages the Stacked architecture with Model-View-ViewModel (MVVM) pattern, utilizing dependency injection and service locators. Key components include a PokemonService for managing Pok\u00e9mon data, dedicated ViewModels for each screen, and a robust routing mechanism. The app is designed with separation of concerns, allowing easy extension and maintenance.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file provides an extension on the BuildContext class to make it easier to access the current AppLocalizations instance, which is responsible for managing the application's localization and internationalization.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizations",
          "description": "Retrieves the current AppLocalizations instance for the given BuildContext.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a centralized and reusable way to handle the internationalization (i18n) and localization (l10n) of the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns a list of localization delegates that provide the translation and formatting logic for the application's strings.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns a list of locales that the application supports for translation and formatting.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the Flutter application, setting up the necessary dependencies, and running the main app widget. It serves as the entry point for the application, ensuring a consistent initialization process across different app flavors.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "This is the main entry point function that initializes the application. It sets up the app's flavor, ensures the WidgetsFlutterBinding is initialized, and configures the app's orientation, locator, dialog UI, and bottom sheet UI. Finally, it runs the main app widget provided by the caller.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the production version of the application. It sets up the initial state and configuration for the app, ensuring it runs in the production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entry point of the application. It calls the `bootstrap` function to initialize the app and render the `AppView`.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the Flutter application. It sets up the application's entry point and configures the application flavor to be 'development'.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application that initializes the development build of the app.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines an enum called `Flavor` with two values: `production` and `development`. It represents the different flavors or environments that the application can run in.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality in the application. It encapsulates the implementation of analytics tracking and provides a centralized interface for managing analytics-related operations.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver class is responsible for tracking the screen views of the application using the AnalyticService. It is a NavigatorObserver that listens for navigation events and logs screen transitions to the analytics service.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + ScreenObserver()\n  + void didPush(Route<dynamic> route, Route<dynamic>? previousRoute)\n  + void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute})\n  + void didPop(Route<dynamic> route, Route<dynamic>? previousRoute)\n  - void _trackScreenView(Route<dynamic> route)\n}\n\nAnalyticService --* ScreenObserver\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a route is replaced in the navigation stack.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Logs the screen view to the AnalyticService based on the current route.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the main application view in a Flutter application. It serves as the ViewModel component in the Model-View-ViewModel (MVVM) architecture, which separates the presentation logic from the business logic.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main UI of the application's home screen. It provides a simple interface for displaying a counter value and allowing the user to interact with the screen by incrementing the counter, showing a dialog, or displaying a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including the counter display, increment button, dialog button, and bottom sheet button.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for handling the counter value and displaying it, as well as providing methods to show a custom dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This file defines the Firebase configuration options for the production environment of the application. It is responsible for providing the necessary Firebase-related settings and credentials to integrate the application with the Firebase services in the production environment.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:firebase_core/firebase_core.dart",
        "lib/config/firebase_options.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized repository for global configuration and settings, providing a consistent and easily accessible way to manage application-wide constants.",
      "class_diagram": "@startuml\n' Enumerations and Constants\npublicConstant totalOnboarding : int\npublicConstant onBoardingHeaderTag : String\npublicConstant pathCompliantStatement : String\npublicConstant pathTermsOfServices : String\npublicConstant defaultContactEmail : String\npublicConstant defaultContactPhone : String\npublicConstant introYoutubeId : String\npublicConstant defaultLanguagesList : List<Map<String, String>>\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching WhatsApp and email communication from a Flutter application. It handles the platform-specific logic to open the appropriate communication channels for the user's device.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application or the WhatsApp web interface with a pre-filled message and recipient phone number.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email application with the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The `DateUtil` class provides a set of utility functions for handling date and time data in the application, particularly when interacting with Firestore.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Extracts a `DateTime` object from a dynamic input value, which can be a `Timestamp` from Firestore, a `String` representation of a date and time, or a `DateTime` object directly.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This file defines a custom exception class `APIException` that is used to handle and propagate exceptions that occur during API service interactions. It provides a standardized way to handle and communicate errors that arise in the application's API layer.",
      "class_diagram": "@startuml\n  class APIException implements Exception {\n    -dynamic message\n    +toString(): String\n  }\n  @enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructor for the `APIException` class. Allows for the creation of a new `APIException` instance with an optional error message.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default `toString()` method to provide a string representation of the `APIException` instance, including the runtime type and the error message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a custom extension on the Flutter `Color` class, adding utility methods for converting hexadecimal color strings to `Color` objects and integer values. This extension simplifies the process of working with color-related functionality in the application, improving developer productivity and maintainability.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to an integer value representing the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines a singleton class 'Flavors' that is responsible for managing the current application flavor, which is typically used to differentiate between development, staging, and production environments. The main purpose of this class is to provide a centralized way to access and check the current application flavor, enabling the application to behave differently based on the specific environment it is running in.",
      "class_diagram": "@startuml\nclass Flavors {\n  - static Flavor? flavor\n  + static bool get isDev()\n  + static bool get isProd()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class, ensuring a singleton instance.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "Flavors.factory",
          "description": "Factory constructor for the Flavors class, returning the singleton instance.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "isDev",
          "description": "Getter that returns true if the current application flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Getter that returns true if the current application flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class is responsible for providing utility functions to handle JSON data in the application. It solves the problem of safely and consistently parsing and formatting JSON data, which is a common task in modern web and mobile applications.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  +static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n  +static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n  +static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic> by removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic JSON value to an instance of type T, or returns null if the input is invalid.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON objects to a List<T> by applying the given fromJson function to each object.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the configuration options for the Firebase service in the development environment of the application. It defines the necessary credentials and settings to initialize and interact with the Firebase platform during the development phase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "flutter_dotenv"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "Centralized localization and internationalization (i18n) configuration export file that provides standardized access to app localization resources and supported language configurations",
      "class_diagram": "@startuml\npackage Localization {\n    [app_localizations.dart]\n    [localizations_extension.dart]\n    [supported_locales.dart]\n}\n@enduml",
      "methods": [
        {
          "name": "exportLocalizations",
          "description": "Exports core localization components for unified language support across the application",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the Flutter application. It is responsible for setting up the overall application structure, including the navigation, localization, and event handling. This class serves as the foundation for the entire application, providing the core functionality and user experience.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main application widget tree, including the MaterialApp, navigation, localization, and event handling.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/add_to_deck/add_to_deck_dialog_model.dart",
      "description": "A ViewModel for handling the state and logic of an 'Add to Deck' dialog in a Flutter application, using the Stacked architecture pattern for state management",
      "class_diagram": "@startuml\nclass AddToDeckDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "constructor",
          "description": "Default constructor for creating an instance of the dialog model",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/deck/deck_viewmodel.dart",
      "description": "A ViewModel for managing a Pokemon deck, responsible for handling deck-related operations like adding, removing, and tracking Pokemon within a user's collection using the Stacked architectural pattern",
      "class_diagram": "@startuml\nclass DeckViewModel {\n  - _pokemonService: PokemonService\n  + deck: List<Pokemon>\n  + isDeckEmpty: bool\n  + isDeckFull: bool\n  + removeFromDeck(pokemonId: String)\n  + clearDeck()\n}\n@enduml",
      "methods": [
        {
          "name": "removeFromDeck",
          "description": "Removes a specific Pokemon from the user's deck by its ID, updates UI state",
          "parameters": [
            "pokemonId"
          ],
          "return_type": null
        },
        {
          "name": "clearDeck",
          "description": "Completely removes all Pokemon from the user's deck, resetting the collection",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "pokemon_service.dart",
        "pokemon.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/pokemon_detail/pokemon_detail_viewmodel.dart",
      "description": "A view model responsible for managing the detailed view and interactions for a specific Pokemon in a Pokemon management application, handling Pokemon retrieval, deck addition, and navigation.",
      "class_diagram": "@startuml\nclass PokemonDetailViewModel {\n  - _pokemonService: PokemonService\n  - _navigationService: NavigationService\n  - _pokemon: Pokemon\n  + initialize(pokemonId: String)\n  + addToDeck()\n  + goBack()\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Retrieves a Pokemon by its ID and prepares the view model's state, handling potential errors",
          "parameters": [
            "pokemonId"
          ],
          "return_type": null
        },
        {
          "name": "addToDeck",
          "description": "Adds the current Pokemon to the user's deck and navigates back to the previous screen",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "goBack",
          "description": "Navigates back to the previous screen without additional actions",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "pokemon_service.dart",
        "stacked",
        "stacked_services",
        "pokemon.dart"
      ]
    },
    {
      "name": "lib/ui/views/deck/deck_view.dart",
      "description": "A Flutter view that displays a user's Pok\u00e9mon deck, allowing users to view and manage their collected Pok\u00e9mon in a grid layout with the ability to clear the entire deck",
      "class_diagram": "@startuml\nclass DeckView {\n  +builder(context: BuildContext, viewModel: DeckViewModel)\n  +viewModelBuilder(context: BuildContext): DeckViewModel\n}\nclass DeckViewModel {\n  +deck: List<Pokemon>\n  +clearDeck()\n  +removeFromDeck(id: String)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the UI for the deck, handling different states like loading, error, empty deck, and populated deck",
          "parameters": [
            "context",
            "viewModel",
            "child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates and provides the ViewModel for the deck view",
          "parameters": [
            "context"
          ],
          "return_type": "DeckViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "deck_viewmodel.dart",
        "deck_card.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/deck_card.dart",
      "description": "A UI widget for displaying individual Pok\u00e9mon card details with removal capability, enabling users to view and manage Pok\u00e9mon in their deck with a visually appealing and informative card interface",
      "class_diagram": "@startuml\nclass DeckCard {\n  -Pokemon pokemon\n  -VoidCallback onRemove\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the visual representation of a Pok\u00e9mon card with details and a removal button",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "pokemon_deck/models/pokemon.dart",
        "pokemon_deck/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/services/pokemon_service.dart",
      "description": "A service responsible for managing Pokemon data and deck-building logic in a Pokemon collection/battling application, providing core functionality for creating, selecting, and managing Pokemon collections",
      "class_diagram": "@startuml\nclass PokemonService {\n  -List<Pokemon> _pokemons\n  -List<Pokemon> _deck\n  +List<Pokemon> pokemons\n  +List<Pokemon> deck\n  +bool isDeckFull\n  +Future<void> initializePokemon()\n  +Pokemon? getPokemon(String id)\n  +bool addToDeck(String pokemonId)\n  +bool removeFromDeck(String pokemonId)\n  +void clearDeck()\n}\n@enduml",
      "methods": [
        {
          "name": "initializePokemon",
          "description": "Creates an initial collection of 20 randomly generated Pokemon with unique attributes",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "getPokemon",
          "description": "Retrieves a specific Pokemon by its ID from the available Pokemon collection",
          "parameters": [
            "pokemonId"
          ],
          "return_type": "Pokemon?"
        },
        {
          "name": "addToDeck",
          "description": "Adds a Pokemon to the player's deck with validation for deck size and duplicate prevention",
          "parameters": [
            "pokemonId"
          ],
          "return_type": "bool"
        },
        {
          "name": "removeFromDeck",
          "description": "Removes a specific Pokemon from the player's deck",
          "parameters": [
            "pokemonId"
          ],
          "return_type": "bool"
        },
        {
          "name": "clearDeck",
          "description": "Completely clears all Pokemon from the player's current deck",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:pokemon_deck/models/pokemon.dart",
        "package:pokemon_deck/utils/const/pokemon_constants.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/pokemon_card.dart",
      "description": "A reusable UI widget that renders a visually appealing card representing a Pokemon, displaying key details and supporting user interaction like adding to deck",
      "class_diagram": "@startuml\nclass PokemonCard {\n  -Pokemon pokemon\n  -VoidCallback onTap\n  -bool showAddButton\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the visual representation of a Pokemon card with image, name, HP, type, and optional add/deck status icons",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "pokemon_deck/models/pokemon.dart",
        "pokemon_deck/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/utils/const/pokemon_constants.dart",
      "description": "A utility class that centralizes constant Pokemon-related data, providing a single source of truth for type information, type images, and common moves across the application.",
      "class_diagram": "@startuml\nclass PokemonConstants {\n  {static} +maxDeckSize: int\n  {static} +types: List<String>\n  {static} +typeImages: Map<String, String>\n  {static} +commonMoves: List<String>\n}\n@enduml",
      "methods": [
        {
          "name": "maxDeckSize",
          "description": "Defines the maximum number of Pokemon that can be in a player's deck",
          "parameters": null,
          "return_type": "int"
        },
        {
          "name": "types",
          "description": "Provides a comprehensive list of all Pokemon types in the game",
          "parameters": null,
          "return_type": "List<String>"
        },
        {
          "name": "typeImages",
          "description": "Maps Pokemon types to their corresponding asset image paths",
          "parameters": null,
          "return_type": "Map<String, String>"
        },
        {
          "name": "commonMoves",
          "description": "Lists standard basic moves used by many Pokemon",
          "parameters": null,
          "return_type": "List<String>"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/models/pokemon.dart",
      "description": "A data model representing a Pokemon character in a game or application, encapsulating key attributes like ID, name, image, health points, type, moves, and deck status. It provides immutable data representation with easy state transformation capabilities.",
      "class_diagram": "@startuml\nclass Pokemon {\n  + id: String\n  + name: String\n  + imageUrl: String\n  + hp: int\n  + type: String\n  + moves: List<String>\n  + inDeck: bool\n  + copyWith(): Pokemon\n}\n@enduml",
      "methods": [
        {
          "name": "constructor",
          "description": "Creates a new Pokemon instance with required attributes",
          "parameters": [
            "id",
            "name",
            "imageUrl",
            "hp",
            "type",
            "moves",
            "inDeck"
          ],
          "return_type": "Pokemon"
        },
        {
          "name": "copyWith",
          "description": "Creates a new Pokemon instance with optionally updated attributes",
          "parameters": [
            "id",
            "name",
            "imageUrl",
            "hp",
            "type",
            "moves",
            "inDeck"
          ],
          "return_type": "Pokemon"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/add_to_deck/add_to_deck_dialog.dart",
      "description": "A Flutter dialog for adding a Pokemon to a user's deck, providing a confirmation interface with Pokemon details and interaction options",
      "class_diagram": "@startuml\nclass AddToDeckDialog {\n  +request: DialogRequest\n  +completer: Function(DialogResponse)\n  +builder(context, viewModel, child): Widget\n  +viewModelBuilder(context): AddToDeckDialogModel\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the visual dialog interface displaying Pokemon details and add/cancel actions",
          "parameters": [
            "BuildContext",
            "AddToDeckDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the associated view model for the dialog's state management",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "AddToDeckDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "pokemon_deck/models/pokemon.dart",
        "pokemon_deck/ui/common/app_colors.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/pokemon_detail/pokemon_detail_view.dart",
      "description": "A detailed view screen for individual Pokemon, responsible for displaying comprehensive Pokemon information and allowing users to add Pokemon to their deck",
      "class_diagram": "@startuml\nclass PokemonDetailView {\n  - pokemonId: String\n  + builder(context: BuildContext, viewModel: PokemonDetailViewModel)\n  + viewModelBuilder(context: BuildContext)\n  + onViewModelReady(viewModel: PokemonDetailViewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the UI for the Pokemon detail screen, handling loading, error, and success states",
          "parameters": [
            "BuildContext",
            "PokemonDetailViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the view model instance for managing Pokemon detail state and logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PokemonDetailViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the view model with the specific Pokemon ID when the view is first created",
          "parameters": [
            "PokemonDetailViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "pokemon_deck/ui/common/app_colors.dart",
        "pokemon_deck/ui/views/pokemon_detail/pokemon_detail_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant PokemonService\nparticipant DeckView\nparticipant PokemonDetailView\nparticipant AddToDeckDialog\n\nUser -> DeckView: View Deck\nDeckView -> PokemonService: Retrieve Deck\nPokemonService --> DeckView: Return Pok\u00e9mon List\nUser -> DeckView: Select Pok\u00e9mon\nDeckView -> PokemonDetailView: Navigate\nPokemonDetailView -> PokemonService: Get Pok\u00e9mon Details\nUser -> PokemonDetailView: Add to Deck\nPokemonDetailView -> AddToDeckDialog: Confirm Add\nAddToDeckDialog -> PokemonService: Add Pok\u00e9mon\nPokemonService --> DeckView: Update Deck\n@enduml",
  "state_management_flow": "State management is implemented using the Stacked framework's BaseViewModel. Each view (DeckView, PokemonDetailView) has a corresponding ViewModel that manages its state. The PokemonService acts as a centralized state container, tracking the global Pok\u00e9mon collection and deck state. ViewModels interact with the service to perform state mutations, with reactive rebuilding triggered by service method calls.",
  "navigation_flow": "Navigation is managed through Stacked's routing system, defined in app.router.dart. The primary navigation flow starts with a StartupView, which initializes the app and transitions to the main DeckView. Users can navigate to PokemonDetailView by selecting a Pok\u00e9mon, with the ability to add Pok\u00e9mon to their deck via a modal dialog. The NavigationService handles all screen transitions, ensuring a clean and decoupled navigation experience."
}